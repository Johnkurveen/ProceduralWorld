<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar chunkNow, chunkOld, chunkChange, showR, corners, moveX, moveY;
corners=ds_list_create();
moveX=5; moveY=5;
showR=0;
chunkOld=0;
chunkChange=10;
//x = room_width / 2;
//y = room_height / 2;
x=0;
y=0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveX=x;
moveY=y;


//movement
// Includes three different speed modes. Arrows=1, wasd=8, ijkl=64
x += (keyboard_check(vk_right) - keyboard_check(vk_left) ) * 1;
y += (keyboard_check(vk_down ) - keyboard_check(vk_up  ) ) * 1;
x += (keyboard_check(ord("D")) - keyboard_check(ord("A"))) * 8;
y += (keyboard_check(ord("S")) - keyboard_check(ord("W"))) * 8;

x += (keyboard_check(ord("L")) - keyboard_check(ord("J"))) * 64;
y += (keyboard_check(ord("K")) - keyboard_check(ord("I"))) * 64;

if(moveX!=x){
    moveX=sign(x-moveX);

}
else{
    moveX=0;
}

if(moveY!=y){
    moveY=sign(y-moveY);

}
else{
    moveY=0;
}


//print(moveY);

// This sets "~" to enable #1-#7 to show resource maps
// The setup allows faster computing for most of the time
if(keyboard_check_pressed(192)){
    showR= !showR;
}

// M to generate the region
if(keyboard_check_pressed(ord("M"))){
    areaGenerate=1;
}




// Sets a boarder to the map
if(abs(x)&gt;mapSize){
    x=sign(x)*mapSize;
}
if(abs(y)&gt;mapSize){
    y=sign(y)*mapSize;
}


// Allows increasing decreasing the value easily
/*
if mouse_check_button_pressed(mb_left){
   seeRadius += 5;
}
else if mouse_check_button_pressed(mb_right){
   seeRadius -= 5;
   }
*/

if mouse_check_button_pressed(mb_left){ // Uses mouse to control frequency
   test /= 2;
   if(test&lt;1){
    test=1;
   }
}
else if mouse_check_button_pressed(mb_right){
   test *= 2;
}

if (keyboard_check_pressed(ord("Q"))){ // Uses Q and E to control resolution
    test2++;
}
else if (keyboard_check_pressed(ord("E"))){
    test2--;
    if(test2&lt;1){
    test2=1;
   }
}


//pan screen
view_xview = x - view_wview / 2;
view_yview = y - view_hview / 2;

//localCheck();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_yellow);
draw_set_alpha(.5);
draw_circle(x,y,10,false);
draw_set_alpha(1);
//draw_set_color(c_green);
//draw_circle(x,y,seeRadius,true);
//draw_set_color(c_red);
//(floor(x/chunkSize)+.5)*chunkSize
//draw_circle((floor(x/chunkSize)+.5)*chunkSize,(floor(y/chunkSize)+.5)*chunkSize,seeRadius,true);
draw_set_color(c_white);
draw_rectangle(x-room_width/2, y-room_height/2, x+room_width/2-1, y+room_height/2-1, true);
draw_set_color(c_yellow);

//draw_text (view_xview + 10, view_yview, "MouseX: " + string(mouse_x) );
//draw_text (view_xview + 10, view_yview+15, "MouseY: " + string(mouse_y) );
draw_text (view_xview + 10, view_yview,    "Player X: " + string(x) );
draw_text (view_xview + 10, view_yview+15, "Player Y: " + string(y) );
draw_text (view_xview + 10, view_yview+30, "Frequency: " + string(test) );
draw_text (view_xview + 10, view_yview+45, "Resolution: " + string(test2) );


var px = mouse_x;
var py = mouse_y;
var xxx;
var yyy;

px -= px % chunkSize; // Origin of current chunk
py -= py % chunkSize;

//xxx= floor((mouse_x%chunkSize)/blockSize);
//yyy= floor((mouse_y%chunkSize)/blockSize);

if(sign(mouse_x) == -1){// Handles negative numbers
    xxx= ceil((mouse_x%chunkSize)/blockSize);
    xxx = chunkSize/blockSize-1 + xxx; 
    px-=chunkSize;
}
else{
    xxx= floor((mouse_x%chunkSize)/blockSize);
} 
if(sign(mouse_y) == -1){
    yyy= ceil((mouse_y%chunkSize)/blockSize);
    yyy = chunkSize/blockSize-1 + yyy;
    py-=chunkSize;
}
else{
    yyy= floor((mouse_y%chunkSize)/blockSize);
}


var col;
var tempGrids=ds_list_create();
var tempID=chunkLoaded(px, py);

//if(chunkExists(px,py)){ // chunkExists only applys to old chunks being loaded
if(tempID){ 
//print(px);print(py);
    for ( var i=0; (i&lt;RESOURCES+1)&amp;&amp;(chunkLoaded(px,py)); i++){
        
        //tempGrids[| i]=ds_grid_create(chunkSize/blockSize, chunkSize/blockSize);
        //print(getKey(px,py));print(getKey(xxx*chunkSize,yyy*chunkSize));
        //print(ds_map_find_value(resourceMap[| 0], getKey(0,0)));
        //ds_grid_read(tempGrids[| i], tempID.resourceGrids[| 0]);
        col=ds_grid_get(tempID.resourceGrids[| i], xxx, yyy);
        if(i=RESOURCES){
            draw_text (view_xview + 10, view_yview + room_height-20-15*i, "rank: " + string(col) );
            draw_text (view_xview + 10, view_yview + room_height-20-15*(i+1), "teir: " + string(tempID.chunkData[| 1]) );
        }
        else{
            draw_text (view_xview + 10, view_yview + room_height-20-15*i, ds_grid_get(res_constant,2, i)+": " + string(col) );
        }
    }
    
}

draw_text (view_xview + room_width-170, view_yview, "Chunks Total: " + string(chunksNumber) );
draw_text (view_xview + room_width-115, view_yview+15, "Towns 1: " + string(townsNumber[| 1]) );
draw_text (view_xview + room_width-115, view_yview+30, "Towns 2: " + string(townsNumber[| 2]) );
draw_text (view_xview + room_width-115, view_yview+45, "Towns 3: " + string(townsNumber[| 3]) );
draw_text (view_xview + room_width-115, view_yview+60, "Towns 4: " + string(townsNumber[| 4]) );
draw_text (view_xview + room_width-115, view_yview+75, "Towns 5: " + string(townsNumber[| 5]) );


//draw_text (view_xview + room_width-115, view_yview + room_height-20, "room: " + string(room_speed) );
draw_text (view_xview + room_width-115, view_yview + room_height-20-15, "fpsr: " + string(fps_real) );
draw_text (view_xview + room_width-105, view_yview + room_height-20-15*2*0, "fps: " + string(fps) );


//draw_set_colour(c_yellow);
//draw_rectangle(corners[| 0], corners[| 1], corners[| 2], corners[| 3], true);



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
