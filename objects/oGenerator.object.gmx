<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar blockSize, chunkSize,
    chunkLoadedSet, terrainMap, resourceMap, mapScale, mapSize, waterLevel, hideEdges,
    test, test2, TERRAIN, RESOURCES, res_constant, resource_info;

//randomize();
seed = round(random_range(1000000,10000000));

blockSize = 8;

chunkSize = 64;

mapScale = 32;
mapSize = power(2,12); // Max distance in any direction
waterLevel = 45;

hideEdges=1; // Generates chunks just before they are visible

test=16;
test2=4;

RESOURCES=4; // Number of resources
TERRAIN=1;

chunkLoadedSet = ds_map_create();

terrainMap = ds_list_create();
for (var i=0; i&lt;TERRAIN; i++){
    terrainMap[| i] = ds_map_create();
}
resourceMap = ds_list_create();
for (var i=0; i&lt;RESOURCES+2; i++){
    resourceMap[| i] = ds_map_create();
}

/***Will need map frequency and Perlin constants****/
// Min/max/offsets?

resource_info=6; // Price, amount, resource, point, tier, time. One per town per resource
//resource_constants=5; // x, y, Cost, halflife, name. Once per resource
resource_constants=8; // halflife, Cost, name, frequency, resolution (Number of perlin layers), Shore (0/1/2, both/only/no), min offset, town weight. Once per resource
resource_focus=0; 

daytick=30*10; // Half a minute = 1 day // Should be 30*30

/*
button1=array_create(3); // Height, Width, Color
button1[0]=24;
button1[1]=button1[0]*3/2;
button1[2]=$F04020;*/

/*
mouse_low=0;
quantity=0;
//quantity_new=0;
trade=0;

c_brown=make_colour_rgb($8A,$6F,$21);
*/

// Defines constants for each resource
res_constant=ds_grid_create(resource_constants,RESOURCES);

for (var R=0; R&lt;RESOURCES; R++){
    ds_grid_set(res_constant, 0, R, 5*daytick);
    
    switch(R){
    case 0:
        ds_grid_set(res_constant, 1, R, 20);
        ds_grid_set(res_constant, 2, R, "Fish");
        ds_grid_set(res_constant, 3, R, 16); // Frequency
        ds_grid_set(res_constant, 4, R, 3);  // Resolution
        ds_grid_set(res_constant, 5, R, 1);  // Shore both/only
        ds_grid_set(res_constant, 6, R, 10); // Offset from min
        ds_grid_set(res_constant, 7, R, 50); // Weight for town establishment
        break;
        
    case 1:
        ds_grid_set(res_constant, 1, R, 50);
        ds_grid_set(res_constant, 2, R, "Wood");
        ds_grid_set(res_constant, 3, R, 16); // Frequency
        ds_grid_set(res_constant, 4, R, 2);  // Resolution
        ds_grid_set(res_constant, 5, R, 0);  // Shore both/only
        ds_grid_set(res_constant, 6, R, 0);  // Offset from min
        ds_grid_set(res_constant, 7, R, 25); // Weight for town
        break;
        
    case 2:
        ds_grid_set(res_constant, 1, R, 100);
        ds_grid_set(res_constant, 2, R, "Stone");
        ds_grid_set(res_constant, 3, R, 32); // Frequency
        ds_grid_set(res_constant, 4, R, 2);  // Resolution
        ds_grid_set(res_constant, 5, R, 0);  // Shore both/only
        ds_grid_set(res_constant, 6, R, -10); // Offset from min
        ds_grid_set(res_constant, 7, R, 15); // Weight for town
        break;
        
    case 3:
        ds_grid_set(res_constant, 1, R, 250);
        ds_grid_set(res_constant, 2, R, "Iron");
        ds_grid_set(res_constant, 3, R, 64); // Frequency
        ds_grid_set(res_constant, 4, R, 2);  // Resolution
        ds_grid_set(res_constant, 5, R, 2);  // Shore both/only/no
        ds_grid_set(res_constant, 6, R, -30); // Offset from min
        ds_grid_set(res_constant, 7, R, 13); // Weight for town 
        break;
        
    default:
        ds_grid_set(res_constant, 1, R, 75);
        ds_grid_set(res_constant, 2, R, "Default");
        break;
    }
    
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spawnChunks();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(oChunk){
    unloadChunk();
}
    
with(oChunk){
    for (var i=0; i&lt;TERRAIN; i++){
        ds_map_destroy(terrainMap[| i]);
    }
    for (i=0; i&lt;RESOURCES; i++){
        ds_map_destroy(resourceMap[| i]);
    }
    ds_list_destroy(terrainGrids);
    ds_list_destroy(resourceGrids);
}


for (i=0; i&lt;TERRAIN; i++){
    ds_map_destroy(terrainMap[| i]);
}
for (i=0; i&lt;RESOURCES; i++){
    ds_map_destroy(resourceMap[| i]);
}
ds_list_destroy(terrainMap);
ds_list_destroy(resourceMap);


ds_map_destroy(chunkLoadedSet);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
